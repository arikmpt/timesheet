// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @db.VarChar(80)
  password            String
  isActive            Boolean   @default(true) @map("is_active")
  lastLogin           DateTime? @map("last_login") @db.Timestamp()
  invitationToken     String?   @map("invitation_token")
  invitationExpiredAt DateTime? @map("invitation_expired_at") @db.Timestamp()
  resetToken          String?   @map("reset_token")
  resetExpiredAt      DateTime? @map("reset_expired_at") @db.Timestamp()
  roleId              Int?      @map("role_id")
  role                Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)
  profile             Profile?
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  Session             Session[]

  @@index([email])
  @@map("users")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id            Int       @id @default(autoincrement())
  firstName     String    @map("first_name") @db.VarChar(80)
  lastName      String    @map("last_name") @db.VarChar(80)
  countryCode   String?   @map("country_code") @db.VarChar(5)
  contactNumber String?   @map("contact_number") @db.VarChar(20)
  birthOfDate   DateTime? @map("birth_of_date") @db.Date
  placeOfBirth  String?   @map("place_of_birth") @db.VarChar(120)
  address       String?   @db.Text
  userId        Int       @unique @map("user_id")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([firstName, lastName])
  @@map("profiles")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(50)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  permissions RolePermission[]
  user        User[]

  @@index([name])
  @@map("roles")
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(50)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  RolePermission RolePermission[]

  @@index([name])
  @@map("permissions")
}

model RolePermission {
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("roles_permissions")
}
